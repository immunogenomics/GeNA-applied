import numpy as np
import pandas as pd
import argparse, cna
np.random.seed(0)

# Parse Arguments                                                                                                                     
parser = argparse.ArgumentParser()
parser.add_argument("--published_loci",type=str)
parser.add_argument("--infile_sumstats",type=str)
parser.add_argument("--outfile_snplist",type=str) # list of IDs and flips for retained lead SNPs
parser.add_argument("--outfile_pruned_loci",type=str) # published results for the retained loci

args = parser.parse_args()
print('\n\n****')
print(args)
print('****\n\n')

# import Orrú published associations
d = pd.read_csv(args.published_loci, sep = "\t")

# rm empty rows --> 1446 remain
empty_row =  pd.isna(d).sum(axis=1) == d.shape[1]
d = d.loc[~np.array(empty_row),:].reset_index(drop = True)

# rm non-autosomal associations --> 1434 remain (12 removed, X chromosome associations)
d['CHR'] = [d['Top variant (chr:pos in GRC37-hg19)'].values[i].split(":")[0] for i in np.arange(d.shape[0])]
d['POS'] = [d['Top variant (chr:pos in GRC37-hg19)'].values[i].split(":")[1] for i in np.arange(d.shape[0])]
d['effect_allele'] = [d['A1(non effect)/ A2(effect) allele'].values[i].split("/")[1] for i in np.arange(d.shape[0])]
d['other_allele'] = [d['A1(non effect)/ A2(effect) allele'].values[i].split("/")[0] for i in np.arange(d.shape[0])]
d = d.loc[d.CHR.values != 'X',:].reset_index(drop = True)

# get SNP ID in desired format
d['MAJ:MIN'] = [":".join(d['Major/minor allele'].values[i].split("/")) for i in np.arange(d.shape[0])]
d['MIN:MAJ'] = [":".join(d['Major/minor allele'].values[i].split("/")[::-1]) for i in np.arange(d.shape[0])]
d['ID'] = [d.CHR.values[i]+":" + d.POS.values[i]+":" + d['MAJ:MIN'].values[i] for i in np.arange(d.shape[0])] 
d['ID_flip'] = [d.CHR.values[i]+":" + d.POS.values[i]+":" + d['MIN:MAJ'].values[i] for i in np.arange(d.shape[0])]
d['CHR'] = [int(d.CHR.values[i]) for i in np.arange(d.shape[0])]
d['POS'] = [int(d.POS.values[i]) for i in np.arange(d.shape[0])]
d['CHR:POS'] = [str(d.CHR.values[i])+":"+str(d.POS.values[i]) for i in np.arange(d.shape[0])]

# remove MFI and morphological traits                                                                                                      
d = d.loc[d.Type!='Morphological parameter',:].reset_index(drop =True)
d = d.loc[d.Type!='MFI',:].reset_index(drop =True)

# retain Orrú loci that were tested in our analysis (passed our QC filters)                                                            
# load csaQTL GWAS results for any celltype; reference of available SNPs                                                                       
all_res = pd.read_table(args.infile_sumstats)
all_res.set_index("ID", inplace = True)
d['tested'] = [d["ID"].values[i] in all_res.index or d["ID_flip"].values[i] in all_res.index for i in np.arange(d.shape[0])]
d = d.loc[d.tested,:].reset_index(drop=True)

# prune SNPs, agnostic to trait                                                                                              
# keep SNP with most sig. assoc. --> rm any others in 2MB window centered on SNP --> repeat
keep_cat = pd.DataFrame({})
while(d.shape[0]>0):
    d.reset_index(inplace = True, drop = True)
    d = d.iloc[np.argsort(d['P-value'].values),:].reset_index(drop=True)
    keep_cat = pd.concat([keep_cat, pd.DataFrame(d.iloc[0,:]).T])
    keep_cat.reset_index(inplace = True, drop = True)
    d.drop(index=[0], inplace = True)
    d.reset_index(drop=True, inplace = True)
    sel_chr = keep_cat.CHR.values[keep_cat.shape[0]-1]
    sel_pos = keep_cat.POS.values[keep_cat.shape[0]-1]
    found_chr = d.CHR.values==sel_chr
    in_window = np.abs(d.POS.values-sel_pos) < 1000000 # distance to lead snp POS < 1MB                                           
    remove = np.logical_and(found_chr, in_window)
    d = d.loc[~remove,:]
d = keep_cat

# Export list of SNPs
snplist = np.concatenate([d.ID.values, d.ID_flip.values])
snplist = pd.DataFrame({"SNP": snplist})
snplist.to_csv(args.outfile_snplist, header = False, index = False)

# Export table of results for these loci
d.to_csv(args.outfile_pruned_loci)
