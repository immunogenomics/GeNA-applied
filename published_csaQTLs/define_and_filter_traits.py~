import pandas as pd
import numpy as np
import statsmodels.api as sm
import cna
np.random.seed(0)
src_folder="/data/srlab/lrumker/MCSC_Project/cna-qtl/trait_replication/"

# Load list of Orrú traits to consider
# From full list of Orrú traits, we manually selected those traits we can quantify using available clusters in our dataset
# and we specified how to define them using the clusters in our dataset
# Import that list of traits here, and how we will define them using clusters in our data
traits = pd.read_table(src_folder+"trait_candidates.txt")
traits['Trait_ID'] = ['T'+str(i+1) for i in np.arange(traits.shape[0])]
print(str(traits.shape[0])+" traits can be defined using clusters in this dataset") # How many traits considered?

# Load allcells single-cell object
d = cna.read('/data/srlab/lrumker/datasets/onek1k/pheno/allcells.h5ad')
majortypes = d.obs.majortype.value_counts().index.tolist()
celltypes = d.obs.celltype.value_counts().index.tolist()

# Compute estimated values per person for these traits in our data using available clusters
for i_trait in np.arange(traits.shape[0]):
    trait_id = traits.Trait_ID[i_trait]
    bool_num = np.repeat(False, d.obs.shape[0])
    bool_denom = np.repeat(False, d.obs.shape[0])

    num_types = traits.Numerator_Types[i_trait].split(",")
    num_types = [num_types[i].strip() for i in np.arange(len(num_types))]
    denom_types = traits.Denominator_Types[i_trait].split(",")
    denom_types = [denom_types[i].strip() for i in np.arange(len(denom_types))]

    for sel_type in num_types:
        if sel_type in majortypes:
            bool_num = np.logical_or(bool_num, d.obs.majortype.values==sel_type)
        elif sel_type in celltypes:
            bool_num = np.logical_or(bool_num, d.obs.celltype.values==sel_type)
        else:
            print("Error:  type "+sel_type+" not found.")
    for sel_type in denom_types:
        if sel_type in majortypes:
            bool_denom = np.logical_or(bool_denom, d.obs.majortype.values==sel_type)
        elif sel_type in celltypes:
            bool_denom = np.logical_or(bool_denom, d.obs.celltype.values==sel_type)
        else:
            print("Error:  type "+sel_type+" not found.")

    d.obs[trait_id+'_in_num'] = 1*bool_num
    d.obs[trait_id+'_in_denom'] = 1*bool_denom
    
# Count total cells in numerator group, and in denominator group, per sample
d.obs_to_sample(np.concatenate([traits.Trait_ID.values+'_in_num', traits.Trait_ID.values+'_in_denom']), aggregate = np.sum)

# Trait is the relative abundance
for trait in traits.Trait_ID.values:
    d.samplem[trait] = d.samplem[trait+'_in_num'].values / d.samplem[trait+'_in_denom'].values

# Save cluster-based phenotypes
export_trait = d.samplem.loc[:,traits.Trait_ID.values]
fid = [d.samplem.index[i].split("_")[0] for i in np.arange(d.samplem.shape[0])]
iid = [d.samplem.index[i].split("_")[1] for i in np.arange(d.samplem.shape[0])]
export_trait.insert(0,"IID", iid)
export_trait.insert(0,"FID", fid)
export_trait.to_csv(src_folder+'orru_trait_est_clusters.csv', index=False, sep = "\t", na_rep = "NA")
export_trait = export_trait.drop(columns=['FID', 'IID'])

# Export covs for PLINK
export_covs = d.samplem.loc[:,["sex_M", "age", "gPC1", "gPC2", "gPC3", "gPC4", "gPC5"]]
fid = [d.samplem.index[i].split("_")[0] for i in np.arange(d.samplem.shape[0])]
iid = [d.samplem.index[i].split("_")[1] for i in np.arange(d.samplem.shape[0])]
export_covs.insert(0,"IID", iid)
export_covs.insert(0,"FID", fid)
export_covs.to_csv(src_folder+'covs.csv', index=False, sep = "\t", na_rep = "NA")

### Which of these phenotypes can be estimated using our top NAM-PCs?

# Assign each trait to the appropriate cell type gwas from our study
traits['Test_In'] = np.repeat('allcells', traits.shape[0])
traits.loc[traits.Denominator_Types=="T", 'Test_In'] = "T"
traits.loc[traits.Denominator_Types=="B", 'Test_In'] = "B"
traits.loc[traits.Denominator_Types=='CD4 Proliferating, CD4 CTL, CD4 TEM, CD4 TCM, CD4 Naive, Treg', 'Test_In'] = "T"
traits.loc[traits.Denominator_Types=='CD8 TEM, CD8 Naive, CD8 Proliferating, CD8 TCM', 'Test_In'] = "T"
traits.loc[traits.Denominator_Types=='ASDC, cDC1, cDC2, pDC', 'Test_In'] = "Myeloid"
traits.loc[traits.Denominator_Types=='CD16 Mono, CD14 Mono', 'Test_In'] = "Myeloid"
traits.loc[traits.Orru_Trait=="T/B", 'Test_In'] = "allcells"

# values of k based on a 80% variance explained threshold
ks = {'allcells': 49, 'T': 33, 'B': 15, 'NK': 17, 'Myeloid': 24}

rsq = [] # get r-squared between cluster-based and NAM-PC-based phenotype values per trait
nampc_phenos = {} # store nampc-based approximation of trait for testing
for sel_type in ['B', 'T', 'NK', 'Myeloid', 'allcells']:
    nampc_phenos[sel_type] = pd.DataFrame({})

for i in np.arange(traits.shape[0]):
    trait_ID = traits.Trait_ID.values[i]
    print(trait_ID)
    sel_type = traits.Test_In[i]
    nampcs = pd.read_csv("/data/srlab/lrumker/datasets/onek1k/pheno/nampcs/"+sel_type+"_batch_covs.csv", index_col=0)
    trait_vals = export_trait.loc[nampcs.index,trait_ID].values # from cluster-based definition
    non_na = ~pd.isna(trait_vals)
    nampcs = sm.add_constant(nampcs.iloc[:,:ks[sel_type]])
    linmod = sm.OLS(trait_vals[non_na], nampcs.iloc[non_na,:]).fit()
    nampcs_trait_est = np.dot(nampcs, linmod.params)
    rsq.append(np.corrcoef(nampcs_trait_est[non_na], trait_vals[non_na])[0,1]**2)
    nampc_phenos[sel_type][trait_ID] = nampcs_trait_est
traits['rsq_nampcs_est'] = rsq
traits['nampcs_capture'] = traits.rsq_nampcs_est>=0.6

print("75th percentile of phenotype values for TCRgd %lymphocyte: "+\
      str(np.around(np.quantile(d.samplem.T8.values,[0.75])[0], 2)))

traits = traits.loc[traits.nampcs_capture,:]
print(str(traits.shape[0])+" traits are well-captured by NAM-PCs (r^2 >=0.6)")

### Export SNP list to test with cluster-based phenotypes

# Import Orrú associations for all of their tested traits                                                                                                    
d = pd.read_csv(src_folder+"Orru_loci.txt", sep = "\t")

# rm empty rows --> 1446 remain                                                                                                                
empty_row =  pd.isna(d).sum(axis=1) == d.shape[1]
d = d.loc[~np.array(empty_row),:].reset_index(drop = True)

# rm non-autosomal associations --> 1434 remain (12 removed, X chromosome associations)                                                               
d['CHR'] = [d['Top variant (chr:pos in GRC37-hg19)'].values[i].split(":")[0] for i in np.arange(d.shape[0])]
d['POS'] = [d['Top variant (chr:pos in GRC37-hg19)'].values[i].split(":")[1] for i in np.arange(d.shape[0])]
d['effect_allele'] = [d['A1(non effect)/ A2(effect) allele'].values[i].split("/")[1] for i in np.arange(d.shape[0])]
d['other_allele'] = [d['A1(non effect)/ A2(effect) allele'].values[i].split("/")[0] for i in np.arange(d.shape[0])]
d = d.loc[d.CHR.values != 'X',:].reset_index(drop = True)

# get SNP ID in desired format — CHR:POS:Non-effect-allele:Effect-allele                                                                            
d['ID'] = [d.CHR.values[i]+":" + d.POS.values[i]+":" + \
           ":".join(d['A1(non effect)/ A2(effect) allele'].values[i].split("/")) \
           for i in np.arange(d.shape[0])]
d['ID_flip'] = [d.CHR.values[i]+":" + d.POS.values[i]+":" + \
           ":".join(d['A1(non effect)/ A2(effect) allele'].values[i].split("/")[::-1]) \
           for i in np.arange(d.shape[0])]

# keep snps for our selected traits only --> 86 SNPs remain
keep = [d.Trait.values[i] in traits.Orru_Trait.values for i in np.arange(d.shape[0])]
d = d.loc[keep,:]
print("Total Orrú genotype associations to the included traits: "+ str(d.shape[0]))

# Transfer our trait IDs to the table of SNPs
d['Trait_ID'] = traits.set_index('Orru_Trait').loc[d.Trait,'Trait_ID'].values
snps = d # Rename snps object  

# Export SNP list
export_snps = pd.DataFrame(np.concatenate([d.ID.values, d.ID_flip.values]))
export_snps.to_csv(src_folder+"replication_snps.txt", index=False, header = False)

# Export nampc-based phenotype estimates, by celltype
for sel_type in ['B', 'T', 'NK', 'Myeloid', 'allcells']:
    nampcs = pd.read_csv("/data/srlab/lrumker/datasets/onek1k/pheno/nampcs/"+sel_type+"_batch_covs.csv", index_col=0)
    fid = [nampcs.index[i].split("_")[0] for i in np.arange(nampcs.shape[0])]
    iid = [nampcs.index[i].split("_")[1] for i in np.arange(nampcs.shape[0])]
    nampc_phenos[sel_type].insert(0,"IID", iid)
    nampc_phenos[sel_type].insert(0,"FID", fid)
    nampc_phenos[sel_type].to_csv('orru_trait_est_'+sel_type+'_nampcs.csv', index=False, sep = "\t", na_rep = "NA")

# Save trait information
traits.to_csv(src_folder+"tested_traits.csv")
snps.to_csv(src_folder+"replication_snp_info.csv")
